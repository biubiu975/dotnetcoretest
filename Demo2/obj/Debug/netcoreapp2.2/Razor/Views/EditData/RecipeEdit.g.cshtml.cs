#pragma checksum "/home/biu351/WorkSpace/Rider/Demo2/Demo2/Views/EditData/RecipeEdit.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f106ee7556b53d300a39236fd45918615cb7d18f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_EditData_RecipeEdit), @"mvc.1.0.view", @"/Views/EditData/RecipeEdit.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/EditData/RecipeEdit.cshtml", typeof(AspNetCore.Views_EditData_RecipeEdit))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/biu351/WorkSpace/Rider/Demo2/Demo2/Views/_ViewImports.cshtml"
using Demo2;

#line default
#line hidden
#line 2 "/home/biu351/WorkSpace/Rider/Demo2/Demo2/Views/_ViewImports.cshtml"
using Demo2.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f106ee7556b53d300a39236fd45918615cb7d18f", @"/Views/EditData/RecipeEdit.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e7e4fe301a35ef20f5ee89a163529b74b9f60331", @"/Views/_ViewImports.cshtml")]
    public class Views_EditData_RecipeEdit : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<object>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(14, 69, true);
            WriteLiteral("\n<!DOCTYPE html>\n\n<html xmlns:v-bind=\"http://www.w3.org/1999/xhtml\">\n");
            EndContext();
            BeginContext(83, 67, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f106ee7556b53d300a39236fd45918615cb7d18f3343", async() => {
                BeginContext(89, 54, true);
                WriteLiteral("\n    <meta charset=\"utf-8\">\n    <title>菜单类型编辑</title>\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(150, 1, true);
            WriteLiteral("\n");
            EndContext();
            BeginContext(151, 4629, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f106ee7556b53d300a39236fd45918615cb7d18f4558", async() => {
                BeginContext(157, 733, true);
                WriteLiteral(@"
<style>
  .avatar-uploader .el-upload {
    border: 1px dashed #d9d9d9;
    border-radius: 6px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }
  .avatar-uploader .el-upload:hover {
    border-color: #409EFF;
    
  }
  .avatar-uploader-icon {
    font-size: 28px;
    color: #8c939d;
    width: 268px;
    height: 178px;
    line-height: 178px;
    text-align: center;
  }
  .avatar {
    width: 268px;
    height: 178px;
    display: block;
  }
</style>
<div id=""app"">
    <el-row>
        <el-col :span=""12"">
            <el-form style=""margin:20px 20px 10px 10px; width: 300px;"">
                <el-form-item label=""菜单类型："">
                    <el-select v-model=""searchModel.typeCode"" placeholder=""请选择"" ");
                EndContext();
                BeginContext(891, 507, true);
                WriteLiteral(@"@change=""changeType"">
                        <el-option
                            v-for=""item in recipeTypes2""
                            :key=""item.code""
                            :label=""item.name""
                            :value=""item.code"">
                        </el-option>
                    </el-select>
                </el-form-item>
            </el-form>
        </el-col>
        <el-col :span=""12"">
            <div style=""float: right;"">
                <el-button type=""primary"" ");
                EndContext();
                BeginContext(1399, 402, true);
                WriteLiteral(@"@click=""addDinnerTable"" style=""margin:20px 20px 10px 10px"">添加</el-button>
            </div>  
        </el-col>
    </el-row>
    <template>
        <el-row>
            <el-col :span=""20"" style=""width: 300px; padding: 5px 5px 5px 5px"" v-for=""(recipe) in recipeList"" v-bind:key=""recipe.id"">
                <Card>
                    <p slot=""title"">{{recipe.name}}<el-checkbox v-model=""recipe.check"" ");
                EndContext();
                BeginContext(1802, 345, true);
                WriteLiteral(@"@change=""checkChange(recipe)"" style=""margin-left: 180px;""></el-checkbox></p>
                    <img style=""width: 255px; height: 150px;"" v-bind:src=""recipe.url""/>
                    <p>简述：{{recipe.name}}</p>
                    <p>价格：{{recipe.price}}￥</p>
                    <p>操作：
                        <el-button type=""text"" size=""mini"" ");
                EndContext();
                BeginContext(2148, 102, true);
                WriteLiteral("@click=\"editRecipe(recipe)\">修改</el-button>\n                        <el-button type=\"text\" size=\"mini\" ");
                EndContext();
                BeginContext(2251, 129, true);
                WriteLiteral("@click=\"deleteRecipe(recipe)\">删除</el-button>\n                        <el-button v-if=\"recipe.isUse == 1\" type=\"text\" size=\"mini\" ");
                EndContext();
                BeginContext(2381, 128, true);
                WriteLiteral("@click=\"isUseRecipe(recipe)\">停用</el-button>\n                        <el-button v-if=\"recipe.isUse != 1\" type=\"text\" size=\"mini\" ");
                EndContext();
                BeginContext(2510, 333, true);
                WriteLiteral(@"@click=""isUseRecipe(recipe)"">启用</el-button>
                        </p>
                </Card>
            </el-col>
            </el-row>
    </template>
    <template>
        <el-pagination
            background
            layout=""prev, pager, next""
            :total=""totalNum""
            :page-size=""pageSize""
            ");
                EndContext();
                BeginContext(2844, 198, true);
                WriteLiteral("@current-change=\"changePage\">\n        </el-pagination>\n    </template>\n    <Modal\n        :value=\"showAddOrEdit\"\n        :title=\"title\"\n        width=\"500px;\"\n        :mask-closable=\"false\"\n        ");
                EndContext();
                BeginContext(3043, 24, true);
                WriteLiteral("@on-ok=\"addYes\"\n        ");
                EndContext();
                BeginContext(3068, 1604, true);
                WriteLiteral(@"@on-cancel=""cancel"">
        <el-form v-bind:model=""recipeModel"">
            <el-form-item label=""菜单名称："" prop=""name"">
                <el-input v-model=""recipeModel.name"" placeholder=""请输入内容""></el-input>
            </el-form-item>

            <el-form-item label=""上传图片："" prop=""filePath"">
                <el-upload
                    class=""avatar-uploader""
                    style=""margin: 42px 99px -20px""
                    action=""/File/UploadFiles""
                    :show-file-list=""false""
                    :on-success=""handleAvatarSuccess""
                    :before-upload=""beforeAvatarUpload"">
                    <img v-if=""imageUrl"" :src=""imageUrl"" class=""avatar"" alt="""">
                    <i v-else class=""el-icon-plus avatar-uploader-icon""></i>
                </el-upload>
            </el-form-item>
            <el-form-item label=""菜单类型名称："" prop=""name"">
                <el-select v-model=""recipeModel.typeCode"" placeholder=""请选择"" style=""width:468px"">
                    <el-option
            ");
                WriteLiteral(@"            v-for=""item in recipeTypes""
                        :key=""item.code""
                        :label=""item.name""
                        :value=""item.code"">
                    </el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=""价格(￥)："" prop=""price"">
                <el-input v-model=""recipeModel.price"" placeholder=""请输入内容""></el-input>
            </el-form-item>
        </el-form>
    </Modal>
    <Modal
        :value=""showDeleted""
        title=""删除""
        width=""500px;""
        :mask-closable=""false""
        ");
                EndContext();
                BeginContext(4673, 28, true);
                WriteLiteral("@on-ok=\"yesDeleted\"\n        ");
                EndContext();
                BeginContext(4702, 71, true);
                WriteLiteral("@on-cancel=\"cancel\">\n        <div>确定删除此条数据么？</div>\n    </Modal>\n</div>\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4780, 9727, true);
            WriteLiteral(@"
<script>
    let app = new Vue({
        el: '#app', //DOM中id为app的HTML div标签
        data: {
            searchModel: {
                typeCode:'',
                name:'',
            },
            recipeModel:{
                typeCode: '',
                name:'',
                url:'',
                fileCode :'',
                uniquecode: '',
                price: '',
                isSaveOrEdit: 1,//1save, 2edit
            },
            allRecipeList:[],
            recipeList:[],
            recipeTypes: [],
            recipeTypes2: [],
            imageUrl: '',
            loadingStatus: false,
            showDeleted: false,
            totalNum: 0,
            pageSize: 10,
            pageNum: 1,
            showAddOrEdit:false,
            title:'',
        },
        methods: {
            isUseRecipe:function(row) {
                let that = this;
                $.get(""/Recipe/IsUseRecipe"", {
                    uniqueCode:top.app.uniqueCode,
                    code: row.code,
   ");
            WriteLiteral(@"             },function (resp) {  
                    let type = resp.code == 1? 'success' : 'error';
                    top.app.alertMessage(type, resp.message);
                    if (resp.code === 1) {
                        // that.pageNum = 1;
                        that.getRecipeList();
                        if(row.isUse == 1) {
                            row.isUse = 0;
                        }else if(row.isUse == 0) {
                            row.isUse = 1;
                        } 
                    }
                }, 'json');
                //that.recipeModel.code = row.code;
            },
            changeType: function() {
                //选择类型后重新获取菜单
                let that = this;
                that.pageNum = 1;
                that.getRecipeList();
            },
            handleAvatarSuccess(resp, file) {
                //debugger;
                if(resp.code === 1) {
                    this.imageUrl = resp.data.filePath;//URL.createObjectURL(file.raw);
            ");
            WriteLiteral(@"        this.recipeModel.fileCode = resp.data.code; 
                    this.recipeModel.url = resp.data.filePath;
                }
            },
            beforeAvatarUpload(file) {
                const isJPG = file.type === 'image/jpeg' || file.type === 'image/png';
                const isLt2M = file.size / 1024 / 1024 < 2;
        
                if (!isJPG) {
                  this.$message.error('上传头像图片只能是 JPG 格式!');
                }
                if (!isLt2M) {
                  this.$message.error('上传头像图片大小不能超过 2MB!');
                }
                return isJPG && isLt2M;
            },
            handleUpload (file) {
                this.file = file;
                return false;
            },
            deleteRecipe:function(row) {
                debugger;
                let that = this;
                that.showDeleted = true;
                that.recipeModel.code = row.code;
            },
            editRecipe:function(row) {
                debugger;
                let that");
            WriteLiteral(@" = this;
                that.showAddOrEdit = true;
                that.title = ""修改"";
                that.recipeModel.name = row.name;
                that.recipeModel.uniquecode = row.uniqueCode;
                that.recipeModel.code = row.code;
                that.recipeModel.price = row.price;
                that.recipeModel.url = row.url;
                that.recipeModel.typeCode = row.typeCode;
                that.recipeModel.isSaveOrEdit = 2;
                
                that.imageUrl = row.url;
            },
            addDinnerTable: function() {
                debugger;
                let that = this;
                that.showAddOrEdit = true;
                that.title = ""添加"";
                that.dinnerTableModel.isSaveOrEdit = 1;
                that.dinnerTableModel.uniquecode = top.app.uniqueCode;
            },
            yesDeleted: function() {
                let that = this;
                $.get(""/Recipe/deletedRecipe"", {
                    uniqueCode:top.app.uniqueCode,
   ");
            WriteLiteral(@"                 code: that.recipeModel.code,
                },function (resp) {  
                    let type = resp.code == 1? 'success' : 'error';
                    top.app.alertMessage(type, resp.message);
                    if (resp.code === 1) {
                        // that.pageNum = 1;
                        that.getRecipeList();
                    }
                }, 'json');
                this.showDeleted = false;
            },
            addYes: function(){
                let that = this;
                let message = """";
                if(isEmpty(that.recipeModel.name)) {
                    message += ""菜单名称不能为空<br>"";
                }
                
                if(isEmpty(that.recipeModel.typeCode)) {
                    message += ""菜单类型不能为空<br>"";
                }
                
                if(isEmpty(that.recipeModel.url)) {
                    message += ""菜单图片不能为空<br>"";
                }
                
                if(isEmpty(that.recipeModel.price)) {
        ");
            WriteLiteral(@"            message += ""价格不能为空<br>"";
                }else if(isNaN(that.recipeModel.price)){
                    message += ""价格必须为数字组成<br>"";
                }
                if(isEmpty(message)) {
                    that.recipeModel.uniquecode = top.app.uniqueCode;
                    $.get(""/Recipe/AddOrEditRecipe"", {
                        uniqueCode:top.app.uniqueCode,
                        name: that.recipeModel.name,
                        code: that.recipeModel.code,
                        isSaveOrEdit: that.recipeModel.isSaveOrEdit,
                        url: that.recipeModel.url,
                        fileCode: that.recipeModel.fileCode,
                        typeCode: that.recipeModel.typeCode,
                        price: that.recipeModel.price,
                    },function (resp) {  
                        let type = resp.code == 1? 'success' : 'error';
                        top.app.alertMessage(type, resp.message);
                        if (resp.code === 1) {
               ");
            WriteLiteral(@"             that.pageNum = 1;
                            that.getRecipeList();
                        }
                    }, 'json');
                }else {
                    top.app.alertMessage('warning', message, true);
                }
                
                this.showAddOrEdit = false;
            },
            cancel:function() {
                this.showAddOrEdit = false;
                this.showDeleted = false;
            },
            changePage:function(page) {
                debugger;
                this.pageNum = page;
                this.getRecipeList();
            },
            tableRowClassName({row, rowIndex}) {
                let temp = rowIndex % 2;
                if (temp === 0) {
                  return 'warning-row';
                } else if (temp === 1) {
                  return 'success-row';
                }
                return '';
            },
            getRecipeTypeList: function () {
                let that = this;
                $.get(""/Rec");
            WriteLiteral(@"ipeType/GetRecipeTypeList"", {
                    uniqueCode:top.app.uniqueCode,
                },function (resp) {         
                    if (resp.code === 1) {
                        that.recipeTypes = resp.data.filter(function(type) {
                            return type;
                        });
                        that.recipeTypes2 = resp.data.filter(function(type) {
                            return type;
                        });
                        that.recipeTypes2.unshift({code:'', name: '全部'});//向数组头部添元素
                    }
                }, 'json');
                
            },
            getRecipeList: function () {
                let that = this;
                $.get(""/Recipe/GetRecipeList"", {
                    uniqueCode:top.app.uniqueCode,
                    pageSize: that.pageSize,
                    pageNum: that.pageNum,
                    typeCode: that.searchModel.typeCode,
                    name: that.searchModel.name,
                },function (");
            WriteLiteral(@"resp) {         
                    if (resp.code === 1) {
                        //debugger;
                        // that.allRecipeList = resp.data.recipes;
                        that.totalNum = resp.data.totalNum;
                        that.recipeList = resp.data.recipes;
                        //that.getTypeRecipes(that.searchModel.typeCode);
                    }
                }, 'json');
                
                // that.getTypeRecipes(top.app.tabIndex);
            },
            getTypeRecipes:function(type_code) {
                debugger;
                let that = this;
                if(type_code === '') {
                    that.recipeList = that.allRecipeList;
                }else {
                    that.recipeList = that.allRecipeList.filter(function(recipe){
                        //debugger;
                        return recipe.typeCode === type_code;
                    });
                }
                debugger;
            },
        },
        beforeCreate: f");
            WriteLiteral(@"unction () {
            
        },
        created: function () {
            this.getRecipeList();
            this.getRecipeTypeList();
        },
        beforeMount: function () {
            
        },
        mounted: function () {
        },
        beforeUpdate: function () {
           
        },
        updated: function () {
            
        },
        beforeDestroy: function () {
            
        },
        destroyed: function () {
            
        }
    })    
</script>
</html>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<object> Html { get; private set; }
    }
}
#pragma warning restore 1591
