#pragma checksum "/home/yuluo/WorkSpace/Rider/income/Income/Views/Recipe/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7e98feb01af37046faa0a9283f771ab031e6e946"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Recipe_Index), @"mvc.1.0.view", @"/Views/Recipe/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Recipe/Index.cshtml", typeof(AspNetCore.Views_Recipe_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/home/yuluo/WorkSpace/Rider/income/Income/Views/_ViewImports.cshtml"
using Demo2;

#line default
#line hidden
#line 2 "/home/yuluo/WorkSpace/Rider/income/Income/Views/_ViewImports.cshtml"
using Demo2.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7e98feb01af37046faa0a9283f771ab031e6e946", @"/Views/Recipe/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e7e4fe301a35ef20f5ee89a163529b74b9f60331", @"/Views/_ViewImports.cshtml")]
    public class Views_Recipe_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<object>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(14, 69, true);
            WriteLiteral("\n<!DOCTYPE html>\n\n<html xmlns:v-bind=\"http://www.w3.org/1999/xhtml\">\n");
            EndContext();
            BeginContext(83, 63, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7e98feb01af37046faa0a9283f771ab031e6e9463297", async() => {
                BeginContext(89, 50, true);
                WriteLiteral("\n    <meta charset=\"utf-8\">\n    <title>菜谱</title>\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(146, 1, true);
            WriteLiteral("\n");
            EndContext();
            BeginContext(309, 16, true);
            WriteLiteral("\n<!-- iview -->\n");
            EndContext();
            BeginContext(517, 18, true);
            WriteLiteral("\n<!-- element -->\n");
            EndContext();
            BeginContext(699, 3444, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7e98feb01af37046faa0a9283f771ab031e6e9464740", async() => {
                BeginContext(705, 714, true);
                WriteLiteral(@"
<style>
    .time {
        font-size: 13px;
        color: #999;
    }
  
    .bottom {
        margin-top: 13px;
        line-height: 12px;
    }

    .button {
        padding: 0;
        float: right;
    }

    .image {
        width: 100%;
        display: block;
    }

    .clearfix:before,
    .clearfix:after {
        display: table;
        content: """";
    }
  
    .clearfix:after {
        clear: both
    }
</style>
<div id=""app"">
    <el-row>
        
            
        <el-col :span=""20"" style=""width: 300px; padding: 5px 5px 5px 5px"" v-for=""(recipe) in recipeList"" v-bind:key=""recipe.id"">
            <Card>
                <p slot=""title"">{{recipe.name}}<el-checkbox v-model=""recipe.check"" ");
                EndContext();
                BeginContext(1420, 545, true);
                WriteLiteral(@"@change=""checkChange(recipe)"" style=""margin-left: 180px;""></el-checkbox></p>
                <img style=""width: 255px; height: 150px;"" v-bind:src=""recipe.url""/>
                <p>简述：{{recipe.name}}</p>
                <p>价格：{{recipe.price}}￥</p>
                <p>数量： <el-input-number v-model=""recipe.num"" size=""mini"" :min=""1"" :max=""10"" label=""描述文字""></el-input-number></p>
            </Card>
        </el-col>
    </el-row>
    <Modal
        :value=""modal1""
        title=""菜单预览""
        width=""700px;""
        :mask-closable=""false""
        ");
                EndContext();
                BeginContext(1966, 20, true);
                WriteLiteral("@on-ok=\"ok\"\n        ");
                EndContext();
                BeginContext(1987, 1326, true);
                WriteLiteral(@"@on-cancel=""cancel"">
        <template>
            桌子编号：
            <el-select v-model=""tableCode"" placeholder=""请选择桌子编号"">
                <el-option
                    v-for=""item in dinnerTables""
                    :key=""item.code""
                    :label=""item.name""
                    :value=""item.code""
                    size=""mini""
                    :disabled=""item.status != 0"">
                </el-option>
            </el-select>
        </template>
        <el-table
            :data=""checkAllRepcipe""
            style=""width: 100%"">
            <el-table-column
                type=""index""
                label=""序号""
                width=""50""
                align=""center"">
            </el-table-column>
            <el-table-column
                label-position=""left""
                prop=""name""
                label=""名称"">
            </el-table-column>
            <el-table-column
                prop=""price""
                label=""售价(￥)""
                width=""100""
                align");
                WriteLiteral(@"=""left"">
            </el-table-column>
            <el-table-column
                prop=""num""
                label=""数量""
                width=""200""
                align=""center"">
                <template slot-scope=""scope"">
                    <el-input-number v-model=""scope.row.num"" size=""mini"" ");
                EndContext();
                BeginContext(3314, 577, true);
                WriteLiteral(@"@change=""calPrice"" :min=""1"" :max=""10""></el-input-number>
                </template>
            </el-table-column>
            <el-table-column
                label=""金额(￥)""
                width=""100""
                align=""left"">
                <template slot-scope=""scope"">{{ scope.row.price * scope.row.num}}</template>
            </el-table-column>
            <el-table-column
                label=""操作""
                width=""50""
                align=""center"">
                <template slot-scope=""scope"">
                    <el-checkbox v-model=""scope.row.check"" ");
                EndContext();
                BeginContext(3892, 244, true);
                WriteLiteral("@change=\"calPrice\" style=\"\"></el-checkbox>\n                </template>\n            </el-table-column>\n        </el-table>\n        <div style=\"font-size:17px; padding:30px 0 0 0; margin:0 0 -60px 0;\">总计(￥)：{{allPrice}}</div>\n    </Modal>\n</div>\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4143, 1, true);
            WriteLiteral("\n");
            EndContext();
            BeginContext(4534, 7335, true);
            WriteLiteral(@"<script>
    var app = new Vue({
        el: '#app', //DOM中id为app的HTML div标签
        data: {
            tabPosition: 'left',
            allPrice: 0,
            modal1: false,
            currentDate: new Date(),
            recipeList:[],
            allRecipeList:[],
            checkAllRepcipe: [],
            dinnerTables:[],
            tableCode:''
        },
        methods: {
            ok:function() {
                //this.modal1 = true;
                //验证数据
                var that = this;
                var msg = '';
                if(isEmpty(that.tableCode)){
                    msg += ""没有选择桌子<br>"";
                }
                
                if(that.allPrice == 0) {
                    msg += ""没有选择菜单<br>"";
                }
                
                var recipes = that.checkAllRepcipe.filter(function(recipe){return recipe.check === true});
                //debugger;
                if(isEmpty(msg)) {
                    $.post(""/Order/AddOrder"", {
                        uni");
            WriteLiteral(@"queCode:top.app.uniqueCode,
                        tableCode:that.tableCode,
                        recipes: recipes,
                        allPrice:that.allPrice
                    },function (resp) {         
                        if (resp.code === 1) {
                            that.modal1 = false;
                            top.app.tableCode = that.tableCode;
                            debugger;
                            top.app.alertMessage(""success"", resp.message);
                            top.app.refreshRecipe();
                            
                        }
                    }, 'json');
                }else {
                    top.app.alertMessage(""warning"", msg, true);
                }
                
            },
            cancel:function() {
                this.modal1 = false;
            },
            getTypeRecipes:function(type_code) {
                debugger;
                var that = this;
                if(type_code === 'all') {
                    tha");
            WriteLiteral(@"t.recipeList = that.allRecipeList;
                }else {
                    that.recipeList = that.allRecipeList.filter(function(recipe){
                        //debugger;
                        return recipe.typeCode === type_code;
                    });
                }
            },
            changeChecked:function(recipe) {
                //debugger;
                var that = this;
                for(var i = 0; i < that.checkAllRepcipe.length; i++) {
                    if(that.checkAllRepcipe[i].code === recipe.code) {
                        that.checkAllRepcipe[i].check = recipe.check;
                    }
                }
            },
            submitChecked:function() {
                var that = this;
                if(that.checkAllRepcipe.length > 0) {
                    that.modal1 = true;
                    that.calPrice();
                } else {
                    top.app.alertMessage('success', '没有选择菜品');
                }
            },
            removeAllChecked: f");
            WriteLiteral(@"unction(){
                var that = this;
                that.allRecipeList.forEach(function(value){
                    value.check = false;
                });
                that.checkAllRepcipe = [];
                that.modal1 = false;
            },
            refreshRecipe:function() {
                var that = this;
                that.allRecipeList = [];
                that.dinnerTables = [];
                that.getRecipeList();
                that.checkAllRepcipe = [];
                that.modal1 = false;
                that.getDinnerTableList();
                that.tableCode = '';
            },
            checkChange:function(recipe) {
                var that = this;
                var check = recipe.check;
                if(check) {
                    that.checkAllRepcipe.push(recipe);
                }else {
                    for(var i = 0; i < that.checkAllRepcipe.length; i++) {
                        if(that.checkAllRepcipe[i].code === recipe.code) {
                       ");
            WriteLiteral(@"     that.checkAllRepcipe.splice(i, 1);
                        }
                    }
                }
            },
            calPrice: function(){
                var that = this;
                var allPrice = 0;
                that.checkAllRepcipe.forEach(function(recipe) {
                    if(recipe.check) {
                        allPrice += recipe.num * recipe.price;
                    }
                });
                that.allPrice = allPrice;
                //debugger;
            },
            checkAllGroupChange: function (data) {
                if (data.length === 3) {
                    this.indeterminate = false;
                    this.checkAll = true;
                } else if (data.length > 0) {
                    this.indeterminate = true;
                    this.checkAll = false;
                } else {
                    this.indeterminate = false;
                    this.checkAll = false;
                }
            },
            getRecipeList: function () {
 ");
            WriteLiteral(@"               var that = this;
                $.get(""/Recipe/GetRecipeList_Index"", {
                    uniqueCode:top.app.uniqueCode
                },function (resp) {         
                    if (resp.code === 1) {
                        // debugger;
                        resp.data.forEach(function(value) {
                            value.num = 1;
                            value.check = false;
                            that.allRecipeList.push(value);
                        });
                        
                        that.getTypeRecipes(top.app.tabIndex);
                    }
                }, 'json');
                
                // that.getTypeRecipes(top.app.tabIndex);
            },
            getDinnerTableList: function () {
                var that = this;
                $.get(""/DinnerTable/GetDinnerTableList"", {
                    uniqueCode:top.app.uniqueCode
                },function (resp) {         
                    if (resp.code === 1) {
                  ");
            WriteLiteral(@"      that.dinnerTables = resp.data;
                        // debugger;
                        // resp.data.forEach(function(value) {
                        //     value.num = 1;
                        //     value.checked = false;
                        //     that.allRecipeList.push(value);
                        // });
                        
                        // that.getTypeRecipes(top.app.tabIndex);
                    }
                }, 'json');
                
                // that.getTypeRecipes(top.app.tabIndex);
            },
            show: function () {
                this.visible = true;
            }
        },
        beforeCreate: function () {
            
        },
        created: function () {
            this.getRecipeList();
            this.getDinnerTableList();
        },
        beforeMount: function () {
            
        },
        mounted: function () {
        },
        beforeUpdate: function () {
           
        },
        updated: function () {
  ");
            WriteLiteral("          \n        },\n        beforeDestroy: function () {\n            \n        },\n        destroyed: function () {\n            \n        }\n    })    \n</script>\n</html>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<object> Html { get; private set; }
    }
}
#pragma warning restore 1591
